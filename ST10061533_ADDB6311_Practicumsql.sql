-- CREATING TABLES FOR DATABASE

-- CREATING TABLE: INSTRUCTOR
CREATE TABLE INSTRUCTOR
(
  INS_ID INT PRIMARY KEY NOT NULL,
  INS_FNAME NVARCHAR2(50) NOT NULL,
  INS_SNAME NVARCHAR2(50) NOT NULL, 	
  INS_CONTACT NVARCHAR2(10) NOT NULL,
  INS_LEVEL INT NOT NULL
  
);

-- CREATING TABLE: CUSTOMER
CREATE TABLE CUSTOMER
(
  CUST_ID NVARCHAR2(10) PRIMARY KEY NOT NULL, 	
  CUST_FNAME NVARCHAR2(50) NOT NULL,
  CUST_SNAME NVARCHAR2(50) NOT NULL,
  CUST_ADDRESS NVARCHAR2(50) NOT NULL,
  CUST_CONTACT NVARCHAR2(50) NOT NULL

);

-- CREATING TABLE: DIVE
CREATE TABLE DIVE
(
  DIVE_ID INT PRIMARY KEY NOT NULL,
  DIVE_NAME NVARCHAR2(50) NOT NULL,
  DIVE_DURATION NVARCHAR2(50) NOT NULL, 	
  DIVE_LOCATION NVARCHAR2(80) NOT NULL,
  DIVE_EXP_LEVEL INT NOT NULL,
  DIVE_COST NUMBER(10,3) NOT NULL

);


-- CREATING TABLE: DIVE_EVENT
CREATE TABLE DIVE_EVENT
(
  DIVE_EVENT_ID NVARCHAR2(10) PRIMARY KEY NOT NULL,
  DIVE_EVENT_DATE DATE NOT NULL,
  DIVE_EVENT_PARTICIPANTS INT NOT NULL,
  INS_ID INT NOT NULL,
  CUST_ID NVARCHAR2(10) NOT NULL,
  DIVE_ID INT NOT NULL,
  FOREIGN KEY (INS_ID) REFERENCES INSTRUCTOR(INS_ID),
  FOREIGN KEY (CUST_ID) REFERENCES CUSTOMER(CUST_ID),
  FOREIGN KEY (DIVE_ID) REFERENCES DIVE(DIVE_ID)
  
);


-- INSERTING VALUES FOR TABLES

-- INSERTING INTO INSTRUCTOR TABLE
INSERT ALL
  INTO INSTRUCTOR (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL) VALUES (101,'James ','Willis','0843569851',7) 
  INTO INSTRUCTOR (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL) VALUES (102,'Sam ','Wait','0763698521',2) 
  INTO INSTRUCTOR (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL) VALUES (103,'Sally ','Gumede','0786598521',8) 
  INTO INSTRUCTOR (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL) VALUES (104,'Bob ','Du Preez','0796369857',3) 
  INTO INSTRUCTOR (INS_ID, INS_FNAME, INS_SNAME, INS_CONTACT, INS_LEVEL) VALUES (105,'Simon ','Jones','0826598741',9) 
  SELECT * FROM DUAL;
  COMMIT;
  
-- INSERTING INTO CUSTOMER TABLE
INSERT ALL
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C115','Heinrich ','Willis','3 Main Road','0821253659')
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C116','David ','Watson','13 Cape Road','0769658547')
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C117','Waldo ','Smith','3 Mountain Road','0863256574')
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C118','Alex ','Hanson','8 Circle Road','0762356587')
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C119','Kuhle ','Bitterhout','15 Main Road','0821235258')
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C120','Thando ','Zolani','88 Summer Road','0847541254')
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C121','Philip ','Jackson','3 Long Road','0745556658')
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C122','Sarah ','Jones','7 Sea Road','0814745745')
  INTO CUSTOMER (CUST_ID, CUST_FNAME, CUST_SNAME, CUST_ADDRESS, CUST_CONTACT) VALUES ('C123','Catherine ','Howard','13 Lake Side Road','0822232521')
  SELECT * FROM DUAL;
  COMMIT;
  

  
-- INSERTING INTO DIVE
INSERT ALL
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (550,'Shark Dive','3 hours', 'Shark Point',8,500)
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (551,'Coral Dive','1 hour','Break Point',7,300)
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (552,'Wave Crescent','2 hours','Ship wreck ally',3,800)
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (553,'Underwater Exploration','1 hour','Coral ally',2,250)
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (554,'Underwater Adventure','3 hours','Sandy Beach',3,750)
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (555,'Deep Blue Ocean','30 minutes','Lazy Waves',2,120)
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (556,'Rough Seas','1 hour','Pipe',9,700)
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (557,'White Water','2 hours','Drifts',5,200)
  INTO DIVE(DIVE_ID, DIVE_NAME, DIVE_DURATION, DIVE_LOCATION,  DIVE_EXP_LEVEL, DIVE_COST) VALUES (558,'Current Adventure','2 hours', 'Rock Lands',3,150)
  SELECT * FROM DUAL;
  COMMIT;
  
  
-- INSERTING INTO DIVE_EVENT
INSERT ALL 
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_101',TO_DATE('15-Jul-17','DD-MM-YY'),5,103,'C115',558)
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_102',TO_DATE('16-Jul-17','DD-MM-YY'),7,102,'C117',555)
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_103',TO_DATE('18-Jul-17','DD-MM-YY'),8,104,'C118',552)
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_104',TO_DATE('19-Jul-17','DD-MM-YY'),3,101,'C119',551)
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_105',TO_DATE('21-Jul-17','DD-MM-YY'),5,104,'C121',558)
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_106',TO_DATE('22-Jul-17','DD-MM-YY'),8,105,'C120',556)
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_107',TO_DATE('25-Jul-17','DD-MM-YY'),10,105,'C115',554)
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_108',TO_DATE('27-Jul-17','DD-MM-YY'),5,101,'C122',552)
  INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('de_109',TO_DATE('28-Jul-17','DD-MM-YY'),3,102,'C123',553)  
  SELECT * FROM DUAL;
  COMMIT;
  
  
-- QUESTION 2: SEGREGATION OF DUTIES
--1. ADMIN DUTIES
-- USER PERMISSION FOR : Admin 
CREATE USER C##ADC_Admin IDENTIFIED BY adcAdmin20;
GRANT CONNECT TO C##ADC_Admin;
GRANT CREATE SESSION TO C##ADC_Admin;
GRANT INSERT ANY TABLE TO C##ADC_Admin;
GRANT SELECT ANY TABLE TO C##ADC_Admin;
GRANT UPDATE ANY TABLE TO C##ADC_Admin;
GRANT DELETE ANY TABLE TO C##ADC_Admin;
-- PERMISSIONS GRANTED TO ADMIN THE ADMIN WILL HAVE TO BE ABLE TO
-- INSERT, UPDATE, DELETE TO THE DATABASE

-- USER PERMISSION FOR : GENERRAL USER
-- 2. GENERAL USER 
CREATE USER C##General_Users IDENTIFIED BY allUser123;
GRANT CONNECT TO C##General_Users;
GRANT CREATE SESSION TO C##General_Users;
GRANT SELECT ANY TABLE TO C##General_Users;
-- PERMISSIONS GRANTED TO GENERAL USER IS THAT THEY BE ABLE TO VIEW DATA
-- BUT NOT BE ABLE TO INSERT, UPDATE OR DELETE DATA FROM THE DATABASE

-- QUESTION 3: QUERY THE NUMBER OF PARTICIPANTS 
SELECT INSTRUCTOR.INS_FNAME || INSTRUCTOR.INS_SNAME AS INSTRUCTOR, 
CUSTOMER.CUST_FNAME || CUSTOMER.CUST_SNAME AS CUSTOMER, DIVE.DIVE_LOCATION, DIVE_EVENT.DIVE_EVENT_PARTICIPANTS
FROM DIVE_EVENT
INNER JOIN INSTRUCTOR ON DIVE_EVENT.INS_ID = INSTRUCTOR.INS_ID
INNER JOIN CUSTOMER ON DIVE_EVENT.CUST_ID = CUSTOMER.CUST_ID
INNER JOIN DIVE ON DIVE_EVENT.DIVE_ID = DIVE.DIVE_ID WHERE DIVE_EVENT_PARTICIPANTS BETWEEN 8 AND 10 AND ROWNUM = 1;

-- QUESTION 4: QUERY THE DIVES WITH MORE PARTICIPANTS
-- SERVER OUTPUT ON TO VIEW OUTPUT
SET SERVEROUTPUT ON;
DECLARE
-- DECLARING VARIBLES
dive_name NVARCHAR2(100);
dive_date DATE;
participant INT;

-- DECLARING A CUSRSOR
CURSOR PARTICIPANTS IS SELECT DIVE_NAME, DIVE_EVENT.DIVE_EVENT_DATE, DIVE_EVENT.DIVE_EVENT_PARTICIPANTS
FROM DIVE_EVENT
INNER JOIN DIVE ON DIVE_EVENT.DIVE_ID = DIVE.DIVE_ID WHERE DIVE_EVENT.DIVE_EVENT_PARTICIPANTS >= 10;

BEGIN 
  OPEN PARTICIPANTS;
  -- FETCH DATA INTO VARIABLES
  FETCH PARTICIPANTS INTO dive_name, dive_date, participant;
  IF PARTICIPANTS%NOTFOUND THEN 
    DBMS_OUTPUT.PUT_LINE('RECORDS NOT FOUND');
  ELSE 
    DBMS_OUTPUT.PUT_LINE('DIVE NAME: ' || dive_name || CHR(10) || 
    'DIVE DATE: ' || dive_date || CHR(10) ||
    'PARTICIPANT: ' || participant);
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
  END IF;
  EXCEPTION -- ERROR HANDLING
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
  CLOSE PARTICIPANTS;
END;

-- QUESTION 5: QUERY THE NUMBER OF INSTRUCTORS REQUIRED
-- SERVER OUTPUT ON TO VIEW OUTPUT
SET SERVEROUTPUT ON;
DECLARE
-- DECLARING VARIBLES
customer_names NVARCHAR2(100);
dive_name NVARCHAR2(50);
participant INT;
status NVARCHAR2(50);
DIVE_EVENT_PARTICIPANTS INT;

-- DECLARING A CURSOR
CURSOR INSTRUCTORS_REQUIRED IS SELECT CUSTOMER.CUST_FNAME || CUSTOMER.CUST_SNAME AS customer_names,
DIVE.DIVE_NAME, DIVE_EVENT.DIVE_EVENT_PARTICIPANTS 
FROM DIVE_EVENT
INNER JOIN CUSTOMER ON DIVE_EVENT.CUST_ID = CUSTOMER.CUST_ID
INNER JOIN DIVE ON DIVE_EVENT.DIVE_ID = DIVE.DIVE_ID WHERE DIVE_COST > 500 ORDER BY customer_names ASC;

BEGIN
  OPEN INSTRUCTORS_REQUIRED;
  LOOP
  FETCH INSTRUCTORS_REQUIRED INTO customer_names,dive_name, participant;
  -- CONDITION STATEMENTS 
  IF participant <= 4 THEN
    status := '1 instructor required.';
    
  ELSIF participant >= 5 AND DIVE_EVENT_PARTICIPANTS <= 7 THEN
    status := '2 instructors required.';
    
  ELSIF participant >= 8 THEN
    status := '3 instructors required.';
    END IF;
    
    EXIT WHEN INSTRUCTORS_REQUIRED%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('CUSTOMER: ' || customer_names || CHR(10) ||
    'DIVE NAME: ' || dive_name || CHR(10) || 
    'PARTICIPANTS: ' || participant || CHR(10) ||
    'STATUS: ' || status);
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------------');
  END LOOP;
  CLOSE INSTRUCTORS_REQUIRED;
END;
  
  
-- QUESTION 6 : CREATE VIEW
CREATE OR REPLACE VIEW Vw_Dive_Event AS
SELECT INSTRUCTOR.INS_ID, CUSTOMER.CUST_ID, CUSTOMER.CUST_ADDRESS, 
DIVE.DIVE_DURATION, DIVE_EVENT.DIVE_EVENT_DATE AS DIVE_DATE
FROM DIVE_EVENT
INNER JOIN INSTRUCTOR ON DIVE_EVENT.INS_ID = INSTRUCTOR.INS_ID
INNER JOIN CUSTOMER ON DIVE_EVENT.CUST_ID = CUSTOMER.CUST_ID
INNER JOIN DIVE ON DIVE_EVENT.DIVE_ID = DIVE.DIVE_ID WHERE DIVE_EVENT_DATE < '19-JUL-17' AND ROWNUM=1;

-- STATEMENT TO RUN VIEW
SELECT * FROM Vw_Dive_Event;

-- QUESTION 7: CREATE TRIGGER
CREATE OR REPLACE TRIGGER New_Dive_Event
BEFORE INSERT OR UPDATE ON DIVE_EVENT -- TRIGGERS ON THE TABLE 
FOR EACH ROW
BEGIN
-- CONDITIONAL STATEMENT
  IF :NEW.DIVE_EVENT_PARTICIPANTS  <= 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Participant cannot be less than zero or zero');
        
  ELSIF :NEW.DIVE_EVENT_PARTICIPANTS  > 20 THEN 
    RAISE_APPLICATION_ERROR(-20001, 'Participants cannot be more than 20');
    
  END IF; 
END;
-- THE FOLLOWING CODES WILL TEST THE New_Dive_Event TRIGGER
-- THIS CODE WILL TEST IF THE INSERT HAS A VALUE OF ZERO(0)
INSERT INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('Te_108',TO_DATE('27-Jul-17','DD-MM-YY'),0,101,'C122',552);
-- THIS CODE WILL TEST IF THE INSERT HAS A VALUES OF 20 OR 
INSERT INTO DIVE_EVENT(DIVE_EVENT_ID, DIVE_EVENT_DATE, DIVE_EVENT_PARTICIPANTS,INS_ID, CUST_ID, DIVE_ID) VALUES ('Te_109',TO_DATE('28-Jul-17','DD-MM-YY'),21,102,'C123',553); 

-- QUESTION 8: CREATE STORED PROCEDURE
CREATE OR REPLACE PROCEDURE sp_Customer_Details(customer_id IN CUSTOMER.CUST_ID%TYPE) AS
  -- DECLARING %TYPE VARIABLES
  customer_first_name NVARCHAR2(50);
  customer_last_name NVARCHAR2(50);
  dive_name NVARCHAR2(50);
  event_date DATE;

  CURSOR Customer_Details IS 
    SELECT CUSTOMER.CUST_FNAME, CUSTOMER.CUST_SNAME, DIVE.DIVE_NAME, DIVE_EVENT.DIVE_EVENT_DATE
    FROM DIVE_EVENT
    INNER JOIN CUSTOMER ON DIVE_EVENT.CUST_ID = CUSTOMER.CUST_ID
    INNER JOIN DIVE ON DIVE_EVENT.DIVE_ID = DIVE.DIVE_ID 
    WHERE CUSTOMER.CUST_ID = customer_id;

BEGIN
  OPEN Customer_Details;
  LOOP
    -- FETCHING DETAILS FROM TABLES
    FETCH Customer_Details INTO customer_first_name, customer_last_name, dive_name, event_date;
    EXIT WHEN Customer_Details%NOTFOUND;
    -- Display the customer details
    DBMS_OUTPUT.PUT_LINE('CUSTOMER DETAILS: ' || customer_first_name || ' ' || customer_last_name || 
                         ' booked for the ' || dive_name || ' on ' || event_date);
  END LOOP;
  CLOSE Customer_Details;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No Customer Record Found');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;

-- STATEMENT TO RUN PROCEDURE
-- SERVER OUTPUT ON TO VIEW OUTPUT OF THE PROCEDURE
SET SERVEROUTPUT ON;
BEGIN
  sp_Customer_Details('C121');
END;

-- QUESTION 9
CREATE OR REPLACE FUNCTION fn_DIVE(EVENT_id in DIVE_EVENT.DIVE_EVENT_ID%TYPE)
RETURN NVARCHAR2
IS 
DETAILS NVARCHAR2(50);
DIVE_EVENT_ID INT; 
DIVE_EVENT_PARTICIPANTS INT;
CURSOR DISPLAY IS SELECT DIVE_EVENT_ID, DIVE_EVENT_PARTICIPANTS
FROM DIVE_EVENT WHERE DIVE_EVENT_PARTICIPANTS > 5 AND DIVE_EVENT.DIVE_EVENT_ID = EVENT_id;
BEGIN
OPEN DISPLAY;

FETCH DISPLAY INTO DIVE_EVENT_ID, DIVE_EVENT_PARTICIPANTS;
IF DISPLAY%NOTFOUND THEN
  DETAILS := 'No record found';
  ELSE 
  DETAILS := 'DIVE_EVENT_ID: ' || DIVE_EVENT_ID || ' PARTICIPANTS: ' || DIVE_EVENT_PARTICIPANTS;
  END IF;
  RETURN DETAILS;
  CLOSE DISPLAY;
  EXCEPTION
  WHEN OTHERS THEN
  RAISE_APPLICATION_ERROR(-20001, 'ERROR FOUND' || SQLERRM);

END;

-- RUN THE FUNCTION
SELECT 'TEST DETAILLS: ' || fn_DIVE(103) AS DIVE_EVENT FROM DUAL;
